{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */

    /* Projects */
    // "incremental": true,  // 保存.tsbuildinfo文件以允许增量编译项目
    // "composite": true,   // 启用允许TypeScript项目与项目引用(references)一起使用约束
    // "tsBuildInfoFile": "./.tsbuildinfo", // 指定.tsbuildinfo增量编译文件的路径。
    // "disableSourceOfProjectReferenceRedirect": true, // 在引用复合项目时禁用首选源文件而不是声明文件
    // "disableSolutionSearching": true, // 编辑时选择项目退出多项目参照检查
    // "disableReferencedProjectLoad": true, // 减少TypeScript自动加载的项目数量。

    /* Language and Environment */
    "target": "es2016", // 为已发出的JavaScript设置JavaScript语言版本，并包含兼容的库声明
    // "lib": [], // 指定一组描述目标运行时环境的绑定库声明文件
    // "jsx": "preserve", // 指定生成的JSX代码
    // "experimentalDecorators": true,  // 启用对遗留实验性装饰器的实验性支持
    // "emitDecoratorMetadata": true,  // 为源文件中的修饰声明发出设计类型元数据。
    // "jsxFactory": "",  // 指定针对React JSX emit时使用的JSX工厂函数，例如“React.createElement”或“h”
    // "jsxFragmentFactory": "", // 指定针对React JSX发射时用于片段的JSX片段引用，例如“React Fragment”或Fragment
    // "jsxImportSource": "",  // 指定在使用"jsx:react-jsx*"时用于导入JSX工厂函数的模块说明符。
    // "reactNamespace": "", // 指定为“createElement”调用的对象。这仅适用于以"react"JSX发射为目标的情况。
    // "noLib": true, // 禁用包含任何库文件，包括默认的lib.d.ts
    // "useDefineForClassFields": true, // 发出符合ECMAScript标准的类字段
    // "moduleDetection": "auto", // 控制使用何种方法检测模块格式的JS文件

    /* Modules */
    "module": "commonjs", // 指定生成的模块代码
    "rootDir": "./src", // 指定源文件中的根文件夹
    // "moduleResolution": "node10", // 指定TypeScript如何从给定的模块说明符中查找文件
    // "baseUrl": "./",   // 指定用于解析非相对模块名称的基本目录。
    // "paths": {},  // 指定一组条目，用于将导入重新映射到其他查找位置
    // "rootDirs": [], // 在解析模块时，允许将多个文件夹视为一个文件夹
    // "typeRoots": [], // 指定多个'/node_modules/@types’类似的文件夹
    // "types": [], // 指定要包含的类型包名称，而不在源文件中引用
    // "allowUmdGlobalAccess": true,  // 允许从模块访问UMD全局
    // "moduleSuffixes": [], // 解析模块时要搜索的文件名后缀列表
    // "allowImportingTsExtensions": true, // 允许导入包含TypeScript文件扩展名。要求设置“--moduleSolution bundler”和“--noEmit”或“--emitDeclarationOnly”。
    // "resolvePackageJsonExports": true,  /* Use the package.json 'exports' field when resolving package imports. */
    // "resolvePackageJsonImports": true,  /* Use the package.json 'imports' field when resolving imports. */
    // "customConditions": [], // 在解析导入时，除了解析程序特定的默认值之外，还要设置的条件
    // "resolveJsonModule": true,   // 启用导入.json文件
    // "allowArbitraryExtensions": true, // 如果存在声明文件，则启用导入任何扩展名的文件
    // "noResolve": true, // 禁止“import”、“require”或“<reference>”扩展TypeScript应添加到项目中的文件数

    /* JavaScript Support */
    // "allowJs": true,  // 允许JavaScript文件成为程序的一部分。使用“checkJS”选项可以从这些文件中获取错误
    // "checkJs": true,  // 在类型检查的JavaScript文件中启用错误报告
    // "maxNodeModuleJsDepth": 1,  // 指定用于检查“node_modules”中JavaScript文件的最大文件夹深度。仅适用于“allowJs”

    /* Emit */
    // "declaration": true,  // 从项目中的TypeScript和JavaScript文件生成.d.ts文件
    // "declarationMap": true,  // 为d.ts文件创建sourcemaps
    // "emitDeclarationOnly": true, // 只输出d.ts文件，不输出JavaScript文件
    // "sourceMap": true,  // 为发出的JavaScript文件创建source map文件
    // "inlineSourceMap": true, // Include sourcemap files inside the emitted JavaScript
    // "outFile": "./",  // 指定一个将所有输出捆绑到一个JavaScript文件中的文件。如果“declaration”为true，还指定一个绑定所有.d.ts输出的文件
    "outDir": "./dist", // 为所有发出的文件指定一个输出文件夹
    // "removeComments": true,  // 禁用发出注释
    // "noEmit": true, // 禁用从编译中发出文件
    // "importHelpers": true, // 允许每个项目从tslib导入一次辅助函数，而不是每个文件都包含这些函数
    // "importsNotUsedAsValues": "remove", // 为仅用于类型的导入指定发出/检查行为
    // "downlevelIteration": true,  // 为迭代发出更兼容但冗长且性能较差的JavaScript
    // "sourceRoot": "",  // 指定调试器查找引用源代码的根路径
    // "mapRoot": "",  // 指定调试器应定位映射文件的位置，而不是生成的位置
    // "inlineSources": true, // 在发出的JavaScript中的源映射中包含源代码。
    // "emitBOM": true,  // 在输出文件的开头发出UTF-8字节顺序标记（BOM）
    // "newLine": "crlf", // 设置发出文件的换行符
    // "stripInternal": true, // 禁用在其JSDoc注释中包含“@internal”的发出声明
    // "noEmitHelpers": true,  // 禁用在编译的输出中生成自定义帮助程序函数，如“__extends”
    // "noEmitOnError": true,  // 如果报告了任何类型检查错误，则禁用发送文件(emitting files)
    // "preserveConstEnums": true, // 禁用在生成的代码中擦除“const enum”声明
    // "declarationDir": "./",  // 为生成的声明文件指定输出目录
    // "preserveValueImports": true, // 在JavaScript输出中保留未使用的导入值，否则这些值将被删除。

    /* Interop Constraints   互操作约束*/
    // "isolatedModules": true,  // 确保每个文件都可以在不依赖其他导入的情况下安全地进行传输
    // "verbatimModuleSyntax": true, // 不要转换或消除任何未标记为仅类型的导入或导出，确保它们以基于“module”设置的输出文件格式编写
    // "allowSyntheticDefaultImports": true,  // 当模块没有默认导出时，允许“import x from y”
    "esModuleInterop": true, // 发出额外的JavaScript以简化对导入CommonJS模块的支持。这为类型兼容性启用了“allowSyntheticDefaultImports”
    // "preserveSymlinks": true, // 禁用将符号链接解析为其真实路径。这与节点中的相同标志相关
    "forceConsistentCasingInFileNames": true, // Ensure that casing is correct in imports.

    /* Type Checking */
    "strict": true, // 启用所有严格的类型检查选项
    // "noImplicitAny": true, // 为具有隐含“any”类型的表达式和声明启用错误报告
    // "strictNullChecks": true, // 在类型检查时，请考虑“null”和“undefined”
    // "strictFunctionTypes": true, // 在分配函数时，请检查以确保参数和返回值与子类型兼容
    // "strictBindCallApply": true, // 请检查“bind”、“call”和“apply”方法的参数是否与原始函数匹配
    // "strictPropertyInitialization": true, // 检查构造函数中已声明但未设置的类属性
    // "noImplicitThis": true,  // 当“this”的类型为“any”时，启用错误报告
    // "useUnknownInCatchVariables": true, // Default catch clause variables as 'unknown' instead of 'any'
    // "alwaysStrict": true, // Ensure 'use strict' is always emitted.
    // "noUnusedLocals": true,  // 在未读取本地变量时启用错误报告
    // "noUnusedParameters": true,  // 未读取函数参数时引发错误
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true /* Skip type checking all .d.ts files. */
  }
}
